/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

&led_strip { chain-length = <27>; };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | ' |
            // |GRAVE |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  [   |
            // | (    |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ]  |
            //                    |LGUI |LCTRL| SPC |   | RET | RSE  | ALT |

            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp E     &kp R      &kp T        &kp Y    &kp U  &kp I         &kp O    &kp P     &kp BACKSPACE
&mt RCTRL TAB   &kp A  &kp S  &kp D     &kp F      &kp G        &kp H    &kp J  &kp K         &kp L    &kp SEMI  &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C     &kp V      &kp B        &kp N    &kp M  &kp COMMA     &kp DOT  &kp FSLH  &kp BACKSLASH
                              &kp LGUI  &kp LCTRL  &kp SPACE    &kp RET  &mo 1  &kp LEFT_ALT
            >;
        };

        num-symb {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT | RGBT| RGBE|hue- |hue+ |Bri- |   |Bri+ |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN           &kp POUND              &kp DOLLAR      &kp LEFT_BRACKET     &kp MINUS  &kp N7  &kp N8  &kp N9  &kp DEL  &trans
&trans  &kp PERCENT      &kp CARET             &kp AMPERSAND          &kp ASTRK       &kp RIGHT_BRACKET    &kp EQUAL  &kp N4  &kp N5  &kp N6  &trans   &to 2
&trans  &kp GRAVE        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACE      &kp N0     &kp N1  &kp N2  &kp N3  &trans   &to 3
                                               &trans                 &trans          &trans               &trans     &trans  &trans
            >;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans  &trans    &kp LC(LEFT_ARROW)  &kp LC(DOWN)      &kp LC(UP_ARROW)  &kp LC(RIGHT)    &kp LG(LC(LEFT_ARROW))  &kp LG(LC(RIGHT))
&trans  &trans     &trans     &trans     &trans  &trans    &kp LEFT_ARROW      &kp DOWN_ARROW    &kp UP_ARROW      &kp RIGHT_ARROW  &trans                  &kp HOME
&trans  &trans     &trans     &trans     &trans  &trans    &trans              &trans            &trans            &trans           &trans                  &kp END
                              &kp LGUI   &to 0   &trans    &trans              &kp LEFT_CONTROL  &kp LEFT_ALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans      &trans        &trans              &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP        &trans  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &kp C_PREV  &kp C_NEXT    &kp C_PLAY_PAUSE    &trans  &trans        &trans        &trans        &trans        &ext_power EP_OFF
                        &trans      &to 0         &trans              &trans  &trans        &trans
            >;
        };
    };
};
